# This file generated by Quarto; do not edit by hand.

from __future__ import annotations

from pathlib import Path
from shiny import App, Inputs, Outputs, Session, ui

import numpy as np
import pandas as pd
import plotly.graph_objects as go
from shiny import render, reactive, ui
from shinywidgets import output_widget, render_widget
percent = pd.read_csv("percentiles.csv")
DF_CURVA = percent.set_index("percentile")

# ========================================================================




def server(input: Inputs, output: Outputs, session: Session) -> None:
    dict(
      icon = "graph-up",
      color = "blue",
      value = "$757.752"
    )

    # ========================================================================

    dict(
      icon = "graph-up",
      color = "warning",
      value = "$502.604"
    )

    # ========================================================================

    ui.input_numeric("sueldo", "Ingrese su sueldo mensual", value=600000)

    # ========================================================================

    @render_widget()
    def nav():
        sueldo = input.sueldo() if input.sueldo() is not None else 0
        aux = DF_CURVA.loc[list((DF_CURVA["sueldo"]<sueldo))]
        percentile_sueldo = 100*DF_CURVA[DF_CURVA["sueldo"]<sueldo].index[-1] if sueldo != 0 else 0
        fig = go.Figure()
        fig.add_trace(go.Scatter(x=list(DF_CURVA.index), y=list(DF_CURVA["sueldo"]), hovertemplate='Sueldo mensual: %{y:$,.0f}<extra></extra>'))
        fig.add_trace(go.Scatter(x=list(aux.index), y=list(aux["sueldo"]), fill='tozeroy', hovertemplate='<extra></extra>'))
        fig.update_layout(
            title = f'{percentile_sueldo:.0f} % de las personas ocupadas gana menos que usted.',
            yaxis_title = 'Ingreso mensual',
            xaxis = dict(
                tickmode = 'array',
                tickvals = [.1*i for i in range(11)],
                ticktext = [f'{10*i}%' for i in range(11)]
            ),
            xaxis_tickformat=',.0%',
            yaxis_tickformat=',.0'.replace(',',','),
            yaxis = dict(
                tickmode = 'array',
                tickvals = [500_000*i for i in range(9)],
                ticktext = [f'${500_000*i:,}'.replace(',','.') for i in range(9)]
            ),
            showlegend=False
        )
        fig.update_layout(
            hovermode="x",
            hoverlabel=dict(
                bgcolor="white",
            )
        )
        return fig

    # ========================================================================




_static_assets = ["dashboard_files"]
_static_assets = {"/" + sa: Path(__file__).parent / sa for sa in _static_assets}

app = App(
    Path(__file__).parent / "dashboard.html",
    server,
    static_assets=_static_assets,
)
